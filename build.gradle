buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id("dev.fritz2.fritz2-gradle") version "0.6"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.3.70"
}


group 'se.kth.somabits'
version '0.0.1'

repositories {
    jcenter()
    mavenLocal()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://dl.bintray.com/spekframework/spek-dev/' }
    maven { url "https://jitpack.io" }
}

kotlin {
    js('frontend') {
        browser {
            runTask {
                frontendBrowserWebpack {
                }
            }
        }
    }
    jvm('backend') {
        compilations.main {
            tasks.getByName(processResourcesTaskName) {
                dependsOn(frontendBrowserProductionWebpack)
                from(frontendBrowserProductionWebpack.outputPath)
            }

        }
    }
    jvmTest {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation("dev.fritz2:core:$fritz_version")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        backendMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "io.ktor:ktor-server-core:$ktor_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "io.ktor:ktor-network:$ktor_version"
                implementation "io.ktor:ktor-serialization:$ktor_version"
                implementation "io.ktor:ktor-gson:$ktor_version"
                implementation "org.jmdns:jmdns:3.5.5"
                // Using my fork
                implementation "com.github.Luftzig:JavaOSC:master-SNAPSHOT"
//                implementation "com.illposed.osc:javaosc-core:0.7"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation "io.arrow-kt:arrow-core:$arrow_version"
                implementation "io.arrow-kt:arrow-syntax:$arrow_version"
            }
            configurations.all {
                resolutionStrategy.cacheChangingModulesFor 1, "minutes"
            }
        }
        backendTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
                runtimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"
                runtimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            }
        }
        frontendMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation npm("bootstrap", "4.5.0")
                implementation "dev.fritz2:core:$fritz_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
        frontendTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        all {
            languageSettings.enableLanguageFeature("InlineClasses")
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}


task run(type: JavaExec, dependsOn: [backendJar]) {
    main = "se.kth.somabits.backend.ApplicationKt"
    classpath(configurations.backendRuntimeClasspath, backendJar)
    args = []
    jvmArgs = ["-Djava.net.preferIPv4Stack=true"]
}
